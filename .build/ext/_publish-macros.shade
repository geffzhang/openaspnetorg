
macro name='ExcludeWwrootFiles' projectFile='string'
	@{
		// currently, dnu publish will not exclude files in wwwroot. see https://github.com/dotnet/cli/issues/565
		Console.WriteLine("Excluding wwwroot files temporarily...");

		// does not support globbing
		const string TmpWwwroot = "tmp_wwwroot";

		var projectText = File.ReadAllText(projectFile);
		var projectFolder = Path.GetDirectoryName(projectFile);

		var project = (JsonObject)Json.Deserialize(projectText);
		var wwwroot = (project.ValueAsString("wwwroot") ?? "wwwroot");
		var publishExcludes = project.ValueAsStringArray("publishExclude");
		var wwwrootPaths = publishExcludes.Where(path => path.StartsWith( wwwroot + "/")).ToArray();

		var tmp_wwwroot = Path.Combine(projectFolder, TmpWwwroot);
		if(Directory.Exists(tmp_wwwroot)){
			Directory.Delete(tmp_wwwroot, true);
		}
		Directory.CreateDirectory(tmp_wwwroot);

		foreach(var path in wwwrootPaths){
			var normalizedPath = path.Replace("\\", new String(Path.DirectorySeparatorChar, 1)).Replace("/", new String(Path.DirectorySeparatorChar, 1));
			var fullPath = Path.Combine(projectFolder, normalizedPath);
			var isFile = File.Exists(fullPath);
			var isDirectory = Directory.Exists(fullPath);

			if(!isFile && !isDirectory){
				continue;
			}

			var destPath = normalizedPath.Substring(wwwroot.Length + 1);
			var destFullPath = Path.GetFullPath(Path.Combine(tmp_wwwroot, destPath));
			var parentDir = Path.GetDirectoryName(destFullPath);
			if(!Directory.Exists(parentDir)){
				Directory.CreateDirectory(parentDir);
			}

			if(isDirectory){
				Directory.Move(fullPath, Path.Combine(tmp_wwwroot, destFullPath));
			}
			else if(isFile){
				File.Move(fullPath, Path.Combine(tmp_wwwroot, destFullPath));
			}
		}
	}


macro name='RestoreExcludedWwwrootFiles' projectFile='string'
	@{
		Console.WriteLine("Restoring temporarily excluded wwwroot files...");

		const string TmpWwwroot = "tmp_wwwroot";
		var projectFolder = Path.GetDirectoryName(projectFile);
		var projectText = File.ReadAllText(projectFile);
		var project = (JsonObject)Json.Deserialize(projectText);

		var tmp_wwwroot = Path.Combine(projectFolder, TmpWwwroot);
		MoveAll(tmp_wwwroot, Path.Combine(projectFolder, (project.ValueAsString("wwwroot") ?? "wwwroot")));
		Directory.Delete(tmp_wwwroot, true);
	}

macro name="MoveAll" sourceDir='string' destDir='string'
	@{
		var dir = new DirectoryInfo(sourceDir);
		if(!dir.Exists){
			return null;
		}
		MergeDirectory(sourceDir, destDir);
	}

macro name='DotnetAt' commands='string' workingDirectory='string'
    dotnet command='${commands}' dotnetDir='${workingDirectory}'


functions @{
	static void MergeDirectory(string sourceDir, string destDir)
	{
		if (!Directory.Exists(destDir))
		{
			Directory.CreateDirectory(destDir);
		}
		var dir = new DirectoryInfo(sourceDir);


		foreach (var file in dir.GetFiles())
		{
			var destFileName = Path.Combine(destDir, file.Name);
			if (File.Exists(destFileName))
			{
				File.Delete(destFileName);
			}

			file.MoveTo(destFileName);
		}

		foreach (var subDir in dir.GetDirectories())
		{
			var destDirName = Path.Combine(destDir, subDir.Name);
			if (Directory.Exists(destDirName))
			{
				MergeDirectory(subDir.FullName, destDirName);
				subDir.Delete();
			}
			else
			{
				subDir.MoveTo(destDirName);
			}
		}
	}
}