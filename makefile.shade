
use namespace='System'
use namespace='System.IO'
use import='Environment'

default currentDir = '${Directory.GetCurrentDirectory()}'
default PublishRuntime = 'win8-x64'

var BUILD_NUMBER = '${Environment.GetEnvironmentVariable("BUILD_NUMBER")}'
var deployServer = '${Environment.GetEnvironmentVariable("CI_DEPLOY_COORDINATOR_SERVER")}'
var deployServerApiKey = '${Environment.GetEnvironmentVariable("CI_DEPLOY_COORDINATOR_KEY")}'

var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Jijie Chen'

use-standard-lifecycle
k-standard-goals



#sakedefault description='Replacement to the default build target. To build the solution, use Sake build-all'
  log info='Please enter your target name.'
  log info='To show all available targets, use Sake help'
  -Environment.Exit(0);

#build-all .default
div#help .targets

#native-compile target='compile'
  log warn='Default native-compile is overridden'

#run-gulp .restore-npm-modules .restore-bower-components target='initialize'
  var gulpDirs = '${GetDirectoriesContaining(Directory.GetCurrentDirectory(), "gulpfile.js")}'
  gulp each='var gulpDir in gulpDirs'


#publish
  var gulpDirs = '${GetDirectoriesContaining(Directory.GetCurrentDirectory(), "gulpfile.js")}'
  gulp each='var gulpDir in gulpDirs' gulpCommand='publish'
  publish-macros

  var runtimeName = '${PublishRuntime}'
  @{
  	CallTarget("clean");

    var projectFiles = Files.Include("src/**/project.json").ToList();

    foreach(var projectFile in projectFiles){
    	var projectFolder = Path.GetDirectoryName(Path.GetFullPath(projectFile));

    	try{
    		ExcludeWwrootFiles(projectFile);
    	}
    	catch(Exception ex){
    		Console.WriteLine("Error occured: {0}", ex.Message);
    		Console.WriteLine(ex.StackTrace);

    		RestoreExcludedWwwrootFiles(projectFile);
    		continue;
    	}

		Console.WriteLine("Generating package for {0}", projectFolder);
    	DotnetAt("publish --configuration Release --runtime " + runtimeName, projectFolder);

    	RestoreExcludedWwwrootFiles(projectFile);

    	Console.WriteLine("Package generated at {0}", Path.Combine(projectFolder, "bin", "output"));

    	if(!string.IsNullOrWhiteSpace(BUILD_NUMBER)) {
			var packageName = new DirectoryInfo(projectFolder).Name;
    		var packageVersion = "1.0." + BUILD_NUMBER;    		
    		Console.WriteLine(@"Creating package file for {0}.{1} for pushing...", packageName, packageVersion);
    		
			var publishOutputPath = string.Format(@"src\{0}\bin\Release\netcoreapp1.0\{1}\publish", packageName, runtimeName);
    		Exec(@".build\OctopusTools\Octo.exe", string.Format(@"pack --id {0} --version {1} --format zip --basePath {2} --outFolder src\{0}\bin\Release --overwrite", packageName, packageVersion, publishOutputPath));

    		Console.WriteLine(@"Package created at src\{0}\bin\Release\{0}.{1}.zip", packageName, packageVersion);

    		if(!string.IsNullOrWhiteSpace(deployServer) && !string.IsNullOrWhiteSpace(deployServerApiKey)) {
	    		Console.WriteLine(@"Uploading package file {0}.{1}.zip to server {2}...", packageName, packageVersion, deployServer);

	    		Exec(@".build\OctopusTools\Octo.exe", string.Format(@"push --package src\{0}\bin\Release\{0}.{1}.zip --server {2} --apikey {3}", packageName, packageVersion, deployServer, deployServerApiKey));

	    		Console.WriteLine(@"Uploaded src\{0}\bin\Release\{0}.{1}.zip to {2} successfully.", packageName, packageVersion, deployServer);
	    	}
    	}
    }
  }


@{
	DefaultTarget = "sakedefault";
}
